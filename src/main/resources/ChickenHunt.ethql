// Based on Rebesky_Augur.ethql by Martin Rebesky

// use connect to specify URL or Ipc
// connect("ws://localhost:8546/");
connectIpc("/data2/geth-archive/chaindata/geth.ipc");

// use setOutputFolder to specify Folder
// setOutputFolder("./test_output/chickenhunt");
setOutputFolder("./chickenhunt_output");

//BLOCKS (5851509) (11000000) {
BLOCKS (5851000) (8000000) {

    // Defined in ``ERC20Interface``
    // Emitted in ``CHStock._giveShares()`` and ``CHStock._transfer()``
    // Transfer of ether between two contracts
    LOG ENTRIES (0x1eD3d2c916cab00631cce4b08a7F880d4Badae94) (Transfer(address indexed from, address indexed to, uint256 value)) {
        EMIT CSV ROW ("Transfer") (block.number, block.timestamp, tx.transactionIndex, log.logIndex, from, to, value);
    }

    // Defined in ``ERC20Interface``
    // Emitted in ``CHStock.approve()``
    LOG ENTRIES (0x1eD3d2c916cab00631cce4b08a7F880d4Badae94) (Approval(address indexed owner, address indexed spender, uint256 value)) {
        EMIT CSV ROW ("Approval") (block.number, block.timestamp, tx.transactionIndex, log.logIndex, owner, spender, value);
    }

    // Defined in ``CHStock``
    // Emitted in ``CHStock.redeemShares()``
    LOG ENTRIES (0x1eD3d2c916cab00631cce4b08a7F880d4Badae94) (RedeemShares(address indexed user, uint256 shares, uint256 dividends)) {
        EMIT CSV ROW ("RedeemShares") (block.number, block.timestamp, tx.transactionIndex, log.logIndex, user, shares, dividends);
    }

    // Defined in ``CHHouse``
    // Emitted in ``CHHouse.buyStore()``
    LOG ENTRIES (0x1eD3d2c916cab00631cce4b08a7F880d4Badae94) (BuyStore(address indexed from, address indexed to, uint256 cost)) {
        EMIT CSV ROW ("BuyStore") (block.number, block.timestamp, tx.transactionIndex, log.logIndex, from, to, cost);
    }

    // Defined in ``CHAltar``
    // Emitted in ``CHAltar._getAltarRecord()``
    LOG ENTRIES (0x1eD3d2c916cab00631cce4b08a7F880d4Badae94) (NewAltarRecord(uint256 id, uint256 ethereum)) {
        EMIT CSV ROW ("NewAltarRecord") (block.number, block.timestamp, tx.transactionIndex, log.logIndex, id, ethereum);
    }
    
    // Defined in ``CHCommittee``
    // Emitted in ``CHCommittee.addPet()``
    LOG ENTRIES (0x1eD3d2c916cab00631cce4b08a7F880d4Badae94) (NewPet(uint256 id, uint256 huntingPower, uint256 offensePower, uint256 defense, uint256 chicken, uint256 ethereum, uint256 max)) {
        EMIT CSV ROW ("NewPet") (block.number, block.timestamp, tx.transactionIndex, log.logIndex, id, huntingPower, offensePower, defense, chicken, ethereum, max);
    }
    
    // Defined in ``CHCommittee``
    // Emitted in ``CHCommittee.changePet()``
    LOG ENTRIES (0x1eD3d2c916cab00631cce4b08a7F880d4Badae94) (ChangePet(uint256 id, uint256 chicken, uint256 ethereum, uint256 max)) {
        EMIT CSV ROW ("ChangePet") (block.number, block.timestamp, tx.transactionIndex, log.logIndex, id, chicken, ethereum, max);
    }
    
    // Defined in ``CHCommittee``
    // Emitted in ``CHCommittee.addItem()``
    LOG ENTRIES (0x1eD3d2c916cab00631cce4b08a7F880d4Badae94) (NewItem(uint256 id, uint256 huntingMultiplier, uint256 offenseMultiplier, uint256 defenseMultiplier, uint256 ethereum)) {
        EMIT CSV ROW ("NewItem") (block.number, block.timestamp, tx.transactionIndex, log.logIndex, id, huntingMultiplier, offenseMultiplier, defenseMultiplier, ethereum);
    }
    
    // Defined in ``CHCommittee``
    // Emitted in ``CHCommittee.setDepot()``
    LOG ENTRIES (0x1eD3d2c916cab00631cce4b08a7F880d4Badae94) (SetDepot(uint256 ethereum, uint256 max)) {
        EMIT CSV ROW ("SetDepot") (block.number, block.timestamp, tx.transactionIndex, log.logIndex, ethereum, max);
    }
    
    // Defined in ``CHCommittee``
    // Emitted in ``CHCommittee.setConfiguration()``
    LOG ENTRIES (0x1eD3d2c916cab00631cce4b08a7F880d4Badae94) (SetConfiguration(uint256 chickenA, uint256 ethereumA, uint256 maxA, uint256 chickenB, uint256 ethereumB, uint256 maxB)) {
        EMIT CSV ROW ("SetConfiguration") (block.number, block.timestamp, tx.transactionIndex, log.logIndex, chickenA, ethereumA, maxA, chickenB, ethereumB, maxB);
    }
    
    // Defined in ``CHCommittee``
    // Emitted in ``CHCommittee.setDistribution()``
    LOG ENTRIES (0x1eD3d2c916cab00631cce4b08a7F880d4Badae94) (SetDistribution(uint256 dividendRate, uint256 altarCut, uint256 storeCut, uint256 devCut)) {
        EMIT CSV ROW ("SetDistribution") (block.number, block.timestamp, tx.transactionIndex, log.logIndex, dividendRate, altarCut, storeCut, devCut);
    }
    
    // Defined in ``CHCommittee``
    // Emitted in ``CHCommittee.setCooldownTime()``
    LOG ENTRIES (0x1eD3d2c916cab00631cce4b08a7F880d4Badae94) (SetCooldownTime(uint256 cooldownTime)) {
        EMIT CSV ROW ("SetCooldownTime") (block.number, block.timestamp, tx.transactionIndex, log.logIndex, cooldownTime);
    }
    
    // Defined in ``CHCommittee``
    // Emitted in ``CHCommittee.setNameAndSymbol()``
    LOG ENTRIES (0x1eD3d2c916cab00631cce4b08a7F880d4Badae94) (SetNameAndSymbol(string name, string symbol)) {
        EMIT CSV ROW ("SetNameAndSymbol") (block.number, block.timestamp, tx.transactionIndex, log.logIndex, name, symbol);
    }
    
    // Defined in ``CHCommittee``
    // Emitted in ``CHCommittee.setDeveloper()``
    LOG ENTRIES (0x1eD3d2c916cab00631cce4b08a7F880d4Badae94) (SetDeveloper(address developer)) {
        EMIT CSV ROW ("SetDeveloper") (block.number, block.timestamp, tx.transactionIndex, log.logIndex, developer);
    }
    
    // Defined in ``CHCommittee``
    // Emitted in ``CHCommittee.setCommittee()``
    LOG ENTRIES (0x1eD3d2c916cab00631cce4b08a7F880d4Badae94) (SetCommittee(address committee)) {
        EMIT CSV ROW ("SetCommittee") (block.number, block.timestamp, tx.transactionIndex, log.logIndex, committee);
    }

    // Defined in ``ChickenHunt``
    // Emitted in ``ChickenHunt.join()``
	LOG ENTRIES (0x1eD3d2c916cab00631cce4b08a7F880d4Badae94) (Join(address user)){
        EMIT CSV ROW ("Join") (block.number, block.timestamp, tx.transactionIndex, log.logIndex, user);
    }

    // Defined in ``CHHunter``
    // Emitted in ``CHHunter.upgradeStrength()``, ``CHHunter.upgradeDexterity()``, ``CHHunter.upgradeConstitution()``, and ``CHHunter.upgradeResistance()``
    LOG ENTRIES (0x1eD3d2c916cab00631cce4b08a7F880d4Badae94) (UpgradeHunter(address indexed user, string attribute, uint256 to)){
        EMIT CSV ROW ("UpgradeHunter") (block.number, block.timestamp, tx.transactionIndex, log.logIndex, user, attribute, to);
    }
    
    // Defined in ``CHHouse``
    // Emitted in ``CHHouse.buyDepots()``
    LOG ENTRIES (0x1eD3d2c916cab00631cce4b08a7F880d4Badae94) (UpgradeDepot(address indexed user, uint256 to)){
        EMIT CSV ROW ("UpgradeDepot") (block.number, block.timestamp, tx.transactionIndex, log.logIndex, user, to);
    }

    // Defined in ``CHHouse``
    // Emitted in ``CHHouse.buyPets()``
    LOG ENTRIES (0x1eD3d2c916cab00631cce4b08a7F880d4Badae94) (UpgradePet(address indexed user, uint256 id, uint256 to)){
        EMIT CSV ROW ("UpgradePet") (block.number, block.timestamp, tx.transactionIndex, log.logIndex, user, id, to);
    }

    // Defined in ``CHHouse``
    // Emitted in ``CHHouse.buyItem()``
    LOG ENTRIES (0x1eD3d2c916cab00631cce4b08a7F880d4Badae94) (BuyItem(address indexed from, address indexed to, uint256 indexed id, uint256 cost)){
        EMIT CSV ROW ("BuyItem") (block.number, block.timestamp, tx.transactionIndex, log.logIndex, from, to, id, cost);
    }

    // Defined in ``CHArena``
    // Emitted in ``CHArena.attack()``
    LOG ENTRIES (0x1eD3d2c916cab00631cce4b08a7F880d4Badae94) (Attack(address indexed attacker, address indexed defender, uint256 booty)){
        EMIT CSV ROW ("Attack") (block.number, block.timestamp, tx.transactionIndex, log.logIndex, attacker, defender, booty);
    }

    // Defined in ``CHAltar``
    // Emitted in ``CHAltar.chickenToAltar()``
    LOG ENTRIES (0x1eD3d2c916cab00631cce4b08a7F880d4Badae94) (ChickenToAltar(address indexed user, uint256 id, uint256 chicken)){
        EMIT CSV ROW ("ChickenToAltar") (block.number, block.timestamp, tx.transactionIndex, log.logIndex, user, id, chicken);
    }

    // Defined in ``CHAltar``
    // Emitted in ``CHAltar._resolveTradeBook()``
    LOG ENTRIES (0x1eD3d2c916cab00631cce4b08a7F880d4Badae94) (EthereumFromAltar(address indexed user, uint256 id, uint256 ethereum)){
        EMIT CSV ROW ("EthereumFromAltar") (block.number, block.timestamp, tx.transactionIndex, log.logIndex, user, id, ethereum);
    }
}